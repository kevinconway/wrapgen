package #! .Name !#

// Code generated by wrapgen DO NOT EDIT

import (
	#! range .ImportsWithSource !##! .Package !# "#! .Path !#"
	#! end !#
)

#! range .Interfaces !#
type (
#! range .Methods !##! $methodRef := . !#
	#! .Name !#Func func (#! range $x, $e := .In !##! $e.Name !# #! $e.Type !##! if ne $x (add (len $methodRef.In) -1)!#, #! end !##! end !#) (#! $methodRef := . !##! range $x, $e := .Out !##! $e.Type !##! if ne $x (add (len $methodRef.Out) -1)!#, #! end !##! end !#)#! end !#
)

type Test#! .Name !# struct {
	#! .Name !# #! .SrcType !#
#! range .Methods !##! $methodRef := . !#
	#! .Name !#Func #! .Name !#Func#! end !#
}

#! $ifaceRef := . !##! range .Methods !##! $methodRef := . !#func (t *Test#! $ifaceRef.Name !#) #! .Name !#(#! range $x, $e := .In !##! $e.Name !# #! $e.Type !##! if ne $x (add (len $methodRef.In) -1)!#, #! end !##! end !#) (#! $methodRef := . !##! range $x, $e := .Out !##! $e.Type !##! if ne $x (add (len $methodRef.Out) -1)!#, #! end !##! end !#) {
	if t.#! .Name !#Func != nil {
		return t.#! .Name !#Func(#! range $x, $e := .In !##! $e.Name !##! if contains "..." $e.Type.String !#...#! end !##! if ne $x (add (len $methodRef.In ) -1) !#,#! end !##! end !#)
	}
	return t.#! $ifaceRef.Name !#.#! .Name !#(#! range $x, $e := .In !##! $e.Name !##! if contains "..." $e.Type.String !#...#! end !##! if ne $x (add (len $methodRef.In ) -1) !#,#! end !##! end !#)
}
#! end !#

var _ #! .SrcType !# = (*Test#! .Name !#)(nil)
#! end !#
